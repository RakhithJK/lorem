// MIT License
//
// Copyright (c) 2019 Sergey Kibish
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

package main

import (
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"os"
	"sort"
	"strings"
	"time"
)

// ResponseJSON describes response structure from lispum.com
type ResponseJSON struct {
	Feed struct {
		Lipsum string `json:"lipsum"`
	} `json:"feed"`
}

func main() {
	log.SetFlags(0)

	respCh := make(chan string)
	wordsMap := make(map[string]bool)
	n := 200
	for i := 0; i < n; i++ {
		go func() {
			resp, err := http.Get("https://www.lipsum.com/feed/json")
			if err != nil {
				log.Fatal(err)
			}
			defer resp.Body.Close()

			var r ResponseJSON

			err = json.NewDecoder(resp.Body).Decode(&r)
			if err != nil {
				log.Fatal(err)
			}

			respCh <- r.Feed.Lipsum
		}()
	}

	counter := n
	for raw := range respCh {
		counter--

		tokens := strings.Split(raw, " ")

		for _, t := range tokens {
			w := normalize(t)
			if wordsMap[w] {
				continue
			}

			wordsMap[w] = true
		}

		if counter == 0 {
			close(respCh)
		}
	}

	words := make([]string, 0, len(wordsMap))
	for k := range wordsMap {
		words = append(words, k)
	}
	sort.Strings(words)

	if err := createFile(words); err != nil {
		log.Fatalf("ERROR: Failed to create file (%v)", err)
	}

}

// normalize normalizes word
func normalize(w string) string {
	w = strings.ToLower(w)

	for _, v := range []string{".", ",", ";", "\n"} {
		w = strings.ReplaceAll(w, v, "")
	}

	return w
}

// createFile creates dictionary.go file with
// provided words
func createFile(words []string) error {
	f, err := os.Create("ipsum/dictionary.go")
	if err != nil {
		return err
	}
	defer f.Close()

	for _, v := range []string{
		"package ipsum\n",
		"\n",
		"// Code generated by gen.go. DO NOT EDIT.\n",
		fmt.Sprintf("// Word count: %d\n", len(words)),
		fmt.Sprintf("// Timestamp: %s\n", time.Now().UTC()),
		"\n",
		"var dictionary = []string{\n",
	} {
		_, err := f.WriteString(v)
		if err != nil {
			return err
		}
	}

	for _, v := range words {
		_, err := f.WriteString(fmt.Sprintf("\t%q,\n", v))
		if err != nil {
			return err
		}
	}

	_, err = f.WriteString("}\n")
	return err
}
